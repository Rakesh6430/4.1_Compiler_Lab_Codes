#include<stdio.h>
#include<stdbool.h>
#include<string.h>


bool isId(char lexemes[])
{

    if(lexemes[0]=='_' || (lexemes[0]>='a' && lexemes[0]<='z') || (lexemes[0]>='A' && lexemes[0]<='Z')){
        int i=1;
        for(;i<strlen(lexemes); i++){
            if(!(lexemes[i]=='_' || (lexemes[i]>='a' && lexemes[i]<='z')
               || (lexemes[i]>='A' && lexemes[i]<='Z') || (lexemes[i]>='0' && lexemes[i]<='9'))){
                   return false;
               }
        }
        return true;
    }
    else
        return false;
}

bool isNumber(char lexemes[])
{
    if(lexemes[0]>='0' && lexemes[0]<='9'){
        return true;
    }
    else if(lexemes[0]=='.'){
        return true;
    }
    else
        return false;
}

bool isSeparator(char string[])
{
    if(string[0]==';'||string[0]==','||string[0]=='{'||string[0]=='}'||string[0]=='('||string[0]==')'){
        return true;
    }
    return false;
}



bool isKeyWord(char lexemes[])
{
    if(strcmp(lexemes,"int")==0){
        return true;
    }
    else if(strcmp(lexemes,"char")==0){
        return true;
    }
    else if(strcmp(lexemes,"float")==0){
        return true;
    }
    else if(strcmp(lexemes,"double")==0){
        return true;
    }
    else if(strcmp(lexemes,"void")==0){
        return true;
    }
    else if(strcmp(lexemes,"main")==0){
        return true;
    }
    else if(strcmp(lexemes,"for")==0){
        return true;
    }
    else if(strcmp(lexemes,"while")==0){
        return true;
    }
    else if(strcmp(lexemes,"if")==0){
        return true;
    }
    else if(strcmp(lexemes,"else")==0){
        return true;
    }
    else if(strcmp(lexemes,"return")==0){
        return true;
    }
    else{
        return false;
    }
}

bool isOperator(char string[])
{
    if(string[0]=='+'||string[0]=='-'||string[0]=='*'||string[0]=='/'||string[0]=='=' ||string[0]=='<'||string[0]=='>'){
        return true;
    }
    return false;
}


int main()
{
    FILE *fp_read, *fp_write;
    char c, c_prev, temp_prev;
    char string[100], temp[100];
    int i=1, f=0, k=0, b=0, m=0, first=0, line=0, if_found=0, top=-1;

    char stack[100];

    fp_read=fopen("input4.txt","r");
    fp_write=fopen("output4.txt","w");

    while((c=fgetc(fp_read))!=-1){
        fprintf(fp_write,"%d ",i);
        if(c=='/'){
            while((c=fgetc(fp_read))!='\n');
            fputc('\n',fp_write);
        }
        else if(c=='\n'){
            fputc(c,fp_write);
        }
        else{
            k=0;
            string[k]=c;
            while((c=fgetc(fp_read))!='\n'){
                while(c!=' '){
                    if(c=='\n'){
                        b=1;
                        break;
                    }
                    k++;
                    string[k]=c;
                    c=fgetc(fp_read);
                }
                string[++k]='\0';

                k=-1;

                if(isKeyWord(string)){
                    fprintf(fp_write,"[kw %s] ",string);
                }
                else if(isId(string)){
                    fprintf(fp_write,"[id %s] ",string);
                }
                else if(isNumber(string)){
                    fprintf(fp_write,"[num %s] ",string);
                }
                else if(isSeparator(string)){
                    fprintf(fp_write,"[sep %s] ",string);
                }
                else if(isOperator(string)){
                    fprintf(fp_write,"[op %s] ",string);
                }
                if(b==1){
                    b=0;
                    break;
                }
            }
            fputc(c,fp_write);
        }
        i++;
    }
    fclose(fp_write);
    fclose(fp_read);


    /*printf("**************Intermediate output:************** \n\n");
    fp_read=fopen("output4.txt","r");
    while((c=fgetc(fp_read))!=-1){
        printf("%c",c);
    }
    fclose(fp_read);*/

   /* printf("\n\n***********Main Output with Duplicacy errors:*************  \n\n");
    string[0]='\0';
    fp_read = fopen("output4.txt","r");
    while((c=fgetc(fp_read))!=-1){
        m=0;
        k=0;
        if(!first || c_prev=='\n'){
            line++;
            first=1;
        }
        if(c=='['){
            while((c=fgetc(fp_read))!=']'){
                if(c==' '){
                    string[k]='\0';
                    if((strcmp(string,temp)==0)){
                        if(strcmp(string,"sep")==0){
                            c=fgetc(fp_read);
                            if(c==temp_prev)
                                printf("Duplicate token taken '%c' at line:  %d\n", c,line);
                        }
                        else
                            printf("Duplicate token taken '%s' at line:  %d\n", string,line);
                    }
                    strcpy(temp,string);
                    temp_prev=(c==' ')?fgetc(fp_read):c;
                }
                else{
                    string[k]=c;
                    k++;
                }
            }
        }
        c_prev=c;
    }*/
    fclose(fp_read);

    printf("\n\n Unmatched 'else' errors:  \n");
    string[0]='\0';
    line=0;
    first=0;
    fp_read = fopen("output4.txt","r");
    while((c=fgetc(fp_read))!=-1){
        k=0;
        if(!first || c_prev=='\n'){
            line++;
            first=1;
        }
        if(c=='['){
            while((c=fgetc(fp_read))!=' ');
            while((c=fgetc(fp_read))!=']'){
                string[k]=c;
                k++;
            }
            string[k]='\0';

            if(strcmp(string,"if")==0){
                if_found=1;
            }
            else if(strcmp(string,"else")==0){
                if(!if_found){
                    printf("   Unmatched 'else' at line: %d\n", line);
                }
            }
            else if(strcmp(string,"}")==0)
                if_found=0;
        }
        c_prev=c;
    }
    fclose(fp_read);

    printf("\n\n Unbalanced 'bracket' errors:  \n");
    string[0]='\0';
    line=0;
    first=0;
    fp_read = fopen("output4.txt","r");
    while((c=fgetc(fp_read))!=-1){
        if(!first || c_prev=='\n'){
            line++;
            first=1;
        }
        if(c=='['){
            while((c=fgetc(fp_read))!=' ');
            while((c=fgetc(fp_read))!=']'){
                string[0]=c;
            }

            if((string[0]=='(') || (string[0]=='{')){
                top++;
                stack[top]=string[0];
            }
            else if((string[0]==')') || (string[0]=='}')){
                if(string[0]==')'){
                    if(stack[top]!='(')
                        printf("  Unmatched ')' at line:  %d\n",line);
                    top--;
                }
                else{
                    if(stack[top]!='{')
                        printf("  Unmatched '}' at line: %d\n",line);
                    top--;
                }
            }
        }
        c_prev=c;
    }
    return 0;
}
